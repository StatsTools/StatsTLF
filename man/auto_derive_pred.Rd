% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auto_derive_pred.R
\name{auto_derive_pred}
\alias{auto_derive_pred}
\title{Automatically Derive Variables Based on Predecessors}
\usage{
auto_derive_pred(dataset, from, by = rlang::exprs(USUBJID))
}
\arguments{
\item{dataset}{A data frame or tibble containing the dataset to process. Columns must have `origin` and `predecessor` attributes.}

\item{from}{A named list of datasets. The names correspond to dataset identifiers, and each element is a dataset containing the variables referenced in the `predecessor` attributes.}

\item{by}{A list of expressions used for grouping (default is `rlang::exprs(USUBJID)`).}
}
\value{
The dataset with derived variables updated where applicable.
}
\description{
This function automates the derivation of variables in a dataset based on their "Predecessor" origin attribute. It identifies variables that match specific conditions and applies the `StatsTLF::derive()` function. Variables that cannot be derived are listed in a warning message.
}
\details{
The function performs the following steps:
\enumerate{
  \item Identifies columns in `dataset` where:
    \itemize{
      \item The `origin` attribute is `"Predecessor"`.
      \item The `predecessor` attribute specifies a dataset and variable in the format `dataset_name.variable_name`.
      \item The dataset (`dataset_name`) exists in the `from` list, and the variable (`variable_name`) exists in the corresponding dataset.
    }
  \item For each valid column, applies `StatsTLF::derive()` to derive the variable.
  \item Variables that cannot be derived (due to missing datasets or variables) are listed in a warning message.
}
}
\examples{
# Example usage
dataset <- tibble::tibble(VAR1 = c(1, 2, 3))
attr(dataset$VAR1, "origin") <- "Predecessor"
attr(dataset$VAR1, "predecessor") <- "SOURCE.VAR1"
from <- list(SOURCE = tibble::tibble(VAR1 = c(4, 5, 6)))

auto_derive_pred(dataset, from = from)

}
\seealso{
\code{\link[StatsTLF]{derive}} for the derivation logic.
}
